// lib/profile/presentation/user_profile/user_profile_screen_root.dart
import 'package:devlink_mobile_app/core/component/error_view.dart';
import 'package:devlink_mobile_app/profile/presentation/user_profile/user_profile_action.dart';
import 'package:devlink_mobile_app/profile/presentation/user_profile/user_profile_notifier.dart';
import 'package:devlink_mobile_app/profile/presentation/user_profile/user_profile_screen.dart';
import 'package:flutter/material.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';

class UserProfileScreenRoot extends ConsumerStatefulWidget {
  final String userId;

  const UserProfileScreenRoot({
    super.key,
    required this.userId,
  });

  @override
  ConsumerState<UserProfileScreenRoot> createState() =>
      _UserProfileScreenRootState();
}

class _UserProfileScreenRootState extends ConsumerState<UserProfileScreenRoot> {
  bool _isInitialized = false;

  @override
  void initState() {
    super.initState();

    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initializeScreen();
    });
  }

  Future<void> _initializeScreen() async {
    if (_isInitialized) return;

    print('üöÄ ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ ÌôîÎ©¥ Ï¥àÍ∏∞Ìôî ÏãúÏûë - userId: ${widget.userId}');

    if (mounted) {
      final notifier = ref.read(userProfileNotifierProvider.notifier);
      await notifier.onAction(UserProfileAction.loadUserProfile(widget.userId));
    }

    _isInitialized = true;
    print('‚úÖ ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ ÌôîÎ©¥ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
  }

  @override
  Widget build(BuildContext context) {
    final state = ref.watch(userProfileNotifierProvider);
    final notifier = ref.read(userProfileNotifierProvider.notifier);

    // ÏóêÎü¨ Î©îÏãúÏßÄ Î¶¨Ïä§ÎÑà
    ref.listen(
      userProfileNotifierProvider.select((value) => value.errorMessage),
      (previous, next) {
        if (next != null && previous != next) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(next),
              backgroundColor: Colors.red,
              action: SnackBarAction(
                label: 'ÌôïÏù∏',
                textColor: Colors.white,
                onPressed: () {
                  notifier.onAction(const UserProfileAction.clearError());
                },
              ),
            ),
          );
        }
      },
    );

    // ÏÑ±Í≥µ Î©îÏãúÏßÄ Î¶¨Ïä§ÎÑà
    ref.listen(
      userProfileNotifierProvider.select((value) => value.successMessage),
      (previous, next) {
        if (next != null && previous != next) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(next),
              backgroundColor: Colors.green,
              action: SnackBarAction(
                label: 'ÌôïÏù∏',
                textColor: Colors.white,
                onPressed: () {
                  notifier.onAction(const UserProfileAction.clearSuccess());
                },
              ),
            ),
          );
        }
      },
    );

    // Ï¥àÍ∏∞Ìôî Ï§ëÏù¥Í±∞ÎÇò Î°úÎî© Ï§ëÏù∏ Í≤ΩÏö∞
    if (!_isInitialized || state.isLoading) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('ÌîÑÎ°úÌïÑ'),
          centerTitle: true,
        ),
        body: const Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              CircularProgressIndicator(),
              SizedBox(height: 16),
              Text('ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...'),
            ],
          ),
        ),
      );
    }

    // ÌîÑÎ°úÌïÑ Î°úÎìú Ïã§Ìå® Ïãú ÏóêÎü¨ ÌôîÎ©¥
    if (state.userProfile is AsyncError) {
      final error = (state.userProfile as AsyncError).error;
      return Scaffold(
        appBar: AppBar(
          title: const Text('ÌîÑÎ°úÌïÑ'),
          centerTitle: true,
        ),
        body: ErrorView(
          error: error,
          onRetry:
              () => notifier.onAction(const UserProfileAction.refreshProfile()),
        ),
      );
    }

    // Ï†ïÏÉÅ ÌôîÎ©¥ Î†åÎçîÎßÅ
    return UserProfileScreen(
      state: state,
      onAction: (action) async {
        if (!mounted) return;
        await notifier.onAction(action);
      },
    );
  }
}
